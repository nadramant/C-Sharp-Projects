using System;
using System.Collections.Generic;
using System.Text;

namespace B20_Ex01_5
{
    class Program
    {
        public static void Main()
        {
            probabilityStatistics();
        }

        private static void probabilityStatistics()
        {
            int userInput;

            Console.WriteLine("Hello, Please enter a positive integer number with 9 digits.");
            userInput = checkInputFromUser();

            Console.WriteLine("The bigest digit in the number is : {0}", findBiggestDigit(userInput));
            Console.WriteLine("The smallest digit in the number is : {0}", findSmallestDigit(userInput));
            Console.WriteLine("The number of digits that divided by 3 are : {0}", findNumOfDivByThreeDig(userInput));
            Console.WriteLine("The number of digits that bigger than unit digit are : {0}", numOfDigitsThatBiggerThanUnitDig(userInput));
        }

        private static int checkInputFromUser()
        {
            int resFromTryParse;
            string input = Console.ReadLine();

            input = input.Trim();

            while (!int.TryParse(input, out resFromTryParse))
            {
                Console.WriteLine("Invalid input.{0}Please enter a positive integer number with 9 digits.", Environment.NewLine);
                input = Console.ReadLine();
            }

            if (!(input.Length == 9 && resFromTryParse > 0))
            {
                Console.WriteLine("Invalid input.{0}Please enter a positive integer number with 9 digits.", Environment.NewLine);
                resFromTryParse = checkInputFromUser();
            }

            return resFromTryParse;
        }

        private static int findBiggestDigit(int i_Num)
        {
            int currDig, currMax = 0;

            while (i_Num > 0)
            {
                currDig = i_Num % 10;
                currMax = Math.Max(currMax, currDig);
                i_Num = i_Num / 10;
            }

            return currMax;
        }

        private static int findSmallestDigit(int i_Num)
        {
            int currDig, currMin = 9;

            while (i_Num > 0)
            {
                currDig = i_Num % 10;
                currMin = Math.Min(currMin, currDig);
                i_Num = i_Num / 10;
            }

            return currMin;
        }
        
        private static int findNumOfDivByThreeDig(int i_Num)
        {
            int currDig, divByThreeCounter = 0, digitsCounter = 0;

            while (i_Num > 0)
            {
                currDig = i_Num % 10;
                if (currDig % 3 == 0)
                {
                    divByThreeCounter++;
                }
                i_Num = i_Num / 10;
                digitsCounter++;
            }

            divByThreeCounter = divByThreeCounter + (9 - digitsCounter);

            return divByThreeCounter;
        }

        private static int numOfDigitsThatBiggerThanUnitDig(int i_Num)
        {
            int unitDig = i_Num % 10;
            int BiggerThanUnitDigitCounter = 0;

            while (i_Num > 0)
            {
                i_Num /= 10;
                if (i_Num % 10 > unitDig)
                {
                    BiggerThanUnitDigitCounter++;
                }
            }

            return BiggerThanUnitDigitCounter;
        }
    }
}
