using System;
using System.Collections.Generic;
using System.Text;

namespace MemoryGame
{
    public class UserInterface
    {
        public enum eOtherPlayerType
        {
            AgainstOtherPlayer = 1,
            AgainstComputer
        }

        public enum ePlayerTurn
        {
            FirstPlayerTurn,
            SecondPlayerTurn
        }

        private const int k_BoardMinSize = 4;
        private const int k_BoardMaxSize = 6;
        private Player m_FirstPlayer;
        private Player m_SecondPlayer;
        private Board<char> m_Board;

        public void Run()
        {
            Console.WriteLine("Hello and welcome to the memory game!{0}Please enter your name.", Environment.NewLine);

            m_FirstPlayer = new Player(checkUserName(), false);

            Console.WriteLine(@"Please enter your choice :
1. Playing against other player.
2. Playing against the computer.");
            bool isAgainstComputer = checkUserChoice();

            if (isAgainstComputer == false)
            {
                Console.WriteLine("Please enter the other user name.");
                m_SecondPlayer = new Player(checkUserName(), false);
            }
            else
            {
                m_SecondPlayer = new Player("Computer", true);
            }

            int boardLength, boardWidth;

            getBoardWidthAndLength(out boardLength, out boardWidth);
            m_Board = new Board<char>(boardLength, boardWidth);
            List<char> contantArray = MakeContantArray();
            m_Board.InitialBoard(contantArray);
            playGame();
        }

        private string checkUserName()
        {
            string strToCheck = Console.ReadLine();
            bool isValid = true;

            foreach (char charInString in strToCheck)
            {
                if (!(char.IsLetter(charInString) || charInString == ' '))
                {
                    isValid = false;
                }
            }

            while (isValid == false)
            {
                Console.WriteLine(@"Invalid user name!
Please enter your name.");
                strToCheck = Console.ReadLine();
            }

            return strToCheck;
        }

        private bool checkUserChoice()
        {
            bool choice;
            int intChoice;

            while (int.TryParse(Console.ReadLine(),out intChoice) == false)
            {
                Console.WriteLine(@"Invalid choice!
Please enter your choice again.");
            }

            eOtherPlayerType eUserChoice = (eOtherPlayerType)intChoice;

            if (eUserChoice == eOtherPlayerType.AgainstOtherPlayer)
            {
                choice = false;
            }
            else if (eUserChoice == eOtherPlayerType.AgainstComputer)
            {
                choice = true;
            }
            else
            {
                Console.WriteLine(@"Invalid choice!
Please enter your choice again.");
                choice = checkUserChoice();
            }

            return choice;
        }

        private void getBoardWidthAndLength(out int o_BoardLength, out int o_BoardWidth)
        {
            Console.WriteLine(@"Please enter the width and the length of the board.
The width and length should be between 4-6, except 5x5.");
            Console.WriteLine("Enter width : ");
            o_BoardLength = int.Parse(Console.ReadLine());
            Console.WriteLine("Enter length : ");
            o_BoardWidth = int.Parse(Console.ReadLine());

            if ((k_BoardMinSize <= o_BoardLength && o_BoardLength <= k_BoardMaxSize) && (k_BoardMinSize <= o_BoardWidth && o_BoardWidth <= k_BoardMaxSize))
            {
                if (o_BoardLength == 5 && o_BoardWidth == 5)
                {
                    Console.WriteLine(@"Invalid input.");
                    getBoardWidthAndLength(out o_BoardLength, out o_BoardWidth);
                }
            }
            else
            {
                Console.WriteLine(@"Invalid input.");
                getBoardWidthAndLength(out o_BoardLength, out o_BoardWidth);
            }
        }

        private void printBoard()
        {
            char charToPrint = 'A';

            Console.Write("    ");
            for (int i = 0; i < m_Board.Cols; i++)
            {
                Console.Write("{0}   ", charToPrint);
                charToPrint++;
            }
            StringBuilder boundaryLine = new StringBuilder(@"
  ");
            boundaryLine.Append('=', 4 * m_Board.Cols + 1);

            Console.Write("{0}{1}", boundaryLine, Environment.NewLine);
            for (int i = 0; i < m_Board.Rows; i++)
            {
                Console.Write("{0} ", i + 1);
                for (int j = 0; j < m_Board.Cols; j++) 
                {
                    if (m_Board[i, j].IsRevieled == true)
                    {
                        Console.Write("| {0} ", m_Board[i, j].CellContant);
                    }
                    else
                    {
                        Console.Write("|   ");
                    }
                }
                Console.Write("|{0}{1}", boundaryLine, Environment.NewLine);
            }
        }

        public List<char> MakeContantArray()
        {
            List<char> contantArray = new List<char>(m_Board.Rows * m_Board.Cols);

            char currVal = 'A';
            for (int i = 0; i < (m_Board.Rows * m_Board.Cols) / 2; i++, currVal++)
            {
                contantArray.Add(currVal);
                contantArray.Add(currVal);
            }

            return contantArray;
        }

        private void playGame()
        {
            ePlayerTurn currTurn = getFirstPlayerTurn();

            Console.WriteLine("Current game board : ");
            printBoard();

            while (isThereAWinner() == false)
            {
                if (currTurn == ePlayerTurn.FirstPlayerTurn)
                {
                    m_FirstPlayer.PlayTurn(m_Board);
                    currTurn = ePlayerTurn.SecondPlayerTurn;
                }
                else
                {
                    m_SecondPlayer.PlayTurn(m_Board);
                    currTurn = ePlayerTurn.FirstPlayerTurn;
                }
            }
        }

       private ePlayerTurn getFirstPlayerTurn()
        {
            Random randPlayer = new Random();
            ePlayerTurn firstPlayerTurn = (ePlayerTurn)randPlayer.Next(1);

            if (firstPlayerTurn == ePlayerTurn.FirstPlayerTurn) 
            {
                Console.WriteLine(@"The first player who plays is - {0}.
Good Luck!", m_FirstPlayer.UserName);
            }
            else
            {
                Console.WriteLine(@"The first player who plays is - {0}.
Good Luck!", m_SecondPlayer.UserName);
            }

            return firstPlayerTurn;
        }

        private bool isThereAWinner()
        {

            return false;
        }
    }
}
